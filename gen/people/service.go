// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// people service
//
// Command:
// $ goa gen github.com/akm/goa_v2_simple_example/design

package people

import (
	"context"

	peopleviews "github.com/akm/goa_v2_simple_example/gen/people/views"
	"goa.design/goa"
)

// Service is the people service interface.
type Service interface {
	// list
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// create
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "full"
	Create(context.Context, *CreatePayload) (res *Person, view string, err error)
	// show
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "full"
	Show(context.Context, *ShowPayload) (res *Person, view string, err error)
	// update
	Update(context.Context, *UpdatePayload) (res *PersonPayload, err error)
	// delete
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "full"
	Delete(context.Context, *DeletePayload) (res *Person, view string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "people"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list", "create", "show", "update", "delete"}

// ListPayload is the payload type of the people service list method.
type ListPayload struct {
	QStart *int
	QEnd   *int
	QOrder *string
	QSort  *string
	Query  *string
}

// ListResult is the result type of the people service list method.
type ListResult struct {
	People      []*Person
	XTotalCount string
}

// CreatePayload is the payload type of the people service create method.
type CreatePayload struct {
	Person *PersonPayload
}

// Person is the result type of the people service create method.
type Person struct {
	ID   *int64
	Name *string
	Memo *string
}

// ShowPayload is the payload type of the people service show method.
type ShowPayload struct {
	ID int64
}

// UpdatePayload is the payload type of the people service update method.
type UpdatePayload struct {
	ID     int64
	Person *PersonPayload
}

// PersonPayload is the result type of the people service update method.
type PersonPayload struct {
	Name string
	Memo *string
}

// DeletePayload is the payload type of the people service delete method.
type DeletePayload struct {
	ID int64
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeValidationError builds a goa.ServiceError from an error.
func MakeValidationError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "validation_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewPerson initializes result type Person from viewed result type Person.
func NewPerson(vres *peopleviews.Person) *Person {
	var res *Person
	switch vres.View {
	case "default", "":
		res = newPerson(vres.Projected)
	case "full":
		res = newPersonFull(vres.Projected)
	}
	return res
}

// NewViewedPerson initializes viewed result type Person from result type
// Person using the given view.
func NewViewedPerson(res *Person, view string) *peopleviews.Person {
	var vres *peopleviews.Person
	switch view {
	case "default", "":
		p := newPersonView(res)
		vres = &peopleviews.Person{p, "default"}
	case "full":
		p := newPersonViewFull(res)
		vres = &peopleviews.Person{p, "full"}
	}
	return vres
}

// newPerson converts projected type Person to service type Person.
func newPerson(vres *peopleviews.PersonView) *Person {
	res := &Person{
		ID:   vres.ID,
		Name: vres.Name,
	}
	return res
}

// newPersonFull converts projected type Person to service type Person.
func newPersonFull(vres *peopleviews.PersonView) *Person {
	res := &Person{
		ID:   vres.ID,
		Name: vres.Name,
		Memo: vres.Memo,
	}
	return res
}

// newPersonView projects result type Person into projected type PersonView
// using the "default" view.
func newPersonView(res *Person) *peopleviews.PersonView {
	vres := &peopleviews.PersonView{
		ID:   res.ID,
		Name: res.Name,
	}
	return vres
}

// newPersonViewFull projects result type Person into projected type PersonView
// using the "full" view.
func newPersonViewFull(res *Person) *peopleviews.PersonView {
	vres := &peopleviews.PersonView{
		ID:   res.ID,
		Name: res.Name,
		Memo: res.Memo,
	}
	return vres
}
