// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// people views
//
// Command:
// $ goa gen github.com/akm/goa_v2_simple_example/design

package views

import (
	goa "goa.design/goa"
)

// Person is the viewed result type that is projected based on a view.
type Person struct {
	// Type to project
	Projected *PersonView
	// View to render
	View string
}

// PersonView is a type that runs validations on a projected type.
type PersonView struct {
	ID   *int64
	Name *string
	Memo *string
}

var (
	// PersonMap is a map of attribute names in result type Person indexed by view
	// name.
	PersonMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
		"full": []string{
			"id",
			"name",
			"memo",
		},
	}
)

// ValidatePerson runs the validations defined on the viewed result type Person.
func ValidatePerson(result *Person) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePersonView(result.Projected)
	case "full":
		err = ValidatePersonViewFull(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "full"})
	}
	return
}

// ValidatePersonView runs the validations defined on PersonView using the
// "default" view.
func ValidatePersonView(result *PersonView) (err error) {

	return
}

// ValidatePersonViewFull runs the validations defined on PersonView using the
// "full" view.
func ValidatePersonViewFull(result *PersonView) (err error) {

	return
}
