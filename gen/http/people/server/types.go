// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// people HTTP server types
//
// Command:
// $ goa gen github.com/akm/goa_v2_simple_example/design

package server

import (
	people "github.com/akm/goa_v2_simple_example/gen/people"
	peopleviews "github.com/akm/goa_v2_simple_example/gen/people/views"
	goa "goa.design/goa"
)

// CreateRequestBody is the type of the "people" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Memo *string `form:"memo,omitempty" json:"memo,omitempty" xml:"memo,omitempty"`
}

// UpdateRequestBody is the type of the "people" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Memo *string `form:"memo,omitempty" json:"memo,omitempty" xml:"memo,omitempty"`
}

// ListResponseBody is the type of the "people" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	People PersonCollectionResponseBody `form:"people" json:"people" xml:"people"`
}

// CreateResponseBody is the type of the "people" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateResponseBodyFull is the type of the "people" service "create" endpoint
// HTTP response body.
type CreateResponseBodyFull struct {
	ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Memo *string `form:"memo,omitempty" json:"memo,omitempty" xml:"memo,omitempty"`
}

// ShowResponseBody is the type of the "people" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ShowResponseBodyFull is the type of the "people" service "show" endpoint
// HTTP response body.
type ShowResponseBodyFull struct {
	ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Memo *string `form:"memo,omitempty" json:"memo,omitempty" xml:"memo,omitempty"`
}

// UpdateResponseBody is the type of the "people" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	Name string  `form:"name" json:"name" xml:"name"`
	Memo *string `form:"memo,omitempty" json:"memo,omitempty" xml:"memo,omitempty"`
}

// DeleteResponseBody is the type of the "people" service "delete" endpoint
// HTTP response body.
type DeleteResponseBody struct {
	ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// DeleteResponseBodyFull is the type of the "people" service "delete" endpoint
// HTTP response body.
type DeleteResponseBodyFull struct {
	ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Memo *string `form:"memo,omitempty" json:"memo,omitempty" xml:"memo,omitempty"`
}

// CreateValidationErrorResponseBody is the type of the "people" service
// "create" endpoint HTTP response body for the "validation_error" error.
type CreateValidationErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNotFoundResponseBody is the type of the "people" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "people" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateValidationErrorResponseBody is the type of the "people" service
// "update" endpoint HTTP response body for the "validation_error" error.
type UpdateValidationErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "people" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PersonCollectionResponseBody is used to define fields on response body types.
type PersonCollectionResponseBody []*PersonResponseBody

// PersonResponseBody is used to define fields on response body types.
type PersonResponseBody struct {
	ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Memo *string `form:"memo,omitempty" json:"memo,omitempty" xml:"memo,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "people" service.
func NewListResponseBody(res *people.ListResult) *ListResponseBody {
	body := &ListResponseBody{}
	if res.People != nil {
		body.People = make([]*PersonResponseBody, len(res.People))
		for i, val := range res.People {
			body.People[i] = &PersonResponseBody{
				ID:   val.ID,
				Name: val.Name,
				Memo: val.Memo,
			}
		}
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "people" service.
func NewCreateResponseBody(res *peopleviews.PersonView) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewCreateResponseBodyFull builds the HTTP response body from the result of
// the "create" endpoint of the "people" service.
func NewCreateResponseBodyFull(res *peopleviews.PersonView) *CreateResponseBodyFull {
	body := &CreateResponseBodyFull{
		ID:   res.ID,
		Name: res.Name,
		Memo: res.Memo,
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "people" service.
func NewShowResponseBody(res *peopleviews.PersonView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewShowResponseBodyFull builds the HTTP response body from the result of the
// "show" endpoint of the "people" service.
func NewShowResponseBodyFull(res *peopleviews.PersonView) *ShowResponseBodyFull {
	body := &ShowResponseBodyFull{
		ID:   res.ID,
		Name: res.Name,
		Memo: res.Memo,
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "people" service.
func NewUpdateResponseBody(res *people.PersonPayload) *UpdateResponseBody {
	body := &UpdateResponseBody{
		Name: res.Name,
		Memo: res.Memo,
	}
	return body
}

// NewDeleteResponseBody builds the HTTP response body from the result of the
// "delete" endpoint of the "people" service.
func NewDeleteResponseBody(res *peopleviews.PersonView) *DeleteResponseBody {
	body := &DeleteResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewDeleteResponseBodyFull builds the HTTP response body from the result of
// the "delete" endpoint of the "people" service.
func NewDeleteResponseBodyFull(res *peopleviews.PersonView) *DeleteResponseBodyFull {
	body := &DeleteResponseBodyFull{
		ID:   res.ID,
		Name: res.Name,
		Memo: res.Memo,
	}
	return body
}

// NewCreateValidationErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "people" service.
func NewCreateValidationErrorResponseBody(res *goa.ServiceError) *CreateValidationErrorResponseBody {
	body := &CreateValidationErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "people" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "people" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateValidationErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "people" service.
func NewUpdateValidationErrorResponseBody(res *goa.ServiceError) *UpdateValidationErrorResponseBody {
	body := &UpdateValidationErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "people" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a people service list endpoint payload.
func NewListPayload(qStart *int, qEnd *int, qOrder *string, qSort *string, query *string) *people.ListPayload {
	return &people.ListPayload{
		QStart: qStart,
		QEnd:   qEnd,
		QOrder: qOrder,
		QSort:  qSort,
		Query:  query,
	}
}

// NewCreatePayload builds a people service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *people.CreatePayload {
	v := &people.PersonPayload{
		Name: *body.Name,
		Memo: body.Memo,
	}
	res := &people.CreatePayload{
		Person: v,
	}
	return res
}

// NewShowPayload builds a people service show endpoint payload.
func NewShowPayload(id int64) *people.ShowPayload {
	return &people.ShowPayload{
		ID: id,
	}
}

// NewUpdatePayload builds a people service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id int64) *people.UpdatePayload {
	v := &people.PersonPayload{
		Name: *body.Name,
		Memo: body.Memo,
	}
	res := &people.UpdatePayload{
		Person: v,
	}
	res.ID = id
	return res
}

// NewDeletePayload builds a people service delete endpoint payload.
func NewDeletePayload(id int64) *people.DeletePayload {
	return &people.DeletePayload{
		ID: id,
	}
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
