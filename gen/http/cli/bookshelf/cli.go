// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// bookshelf HTTP client CLI support package
//
// Command:
// $ goa gen github.com/akm/goa_v2_simple_example/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	peoplec "github.com/akm/goa_v2_simple_example/gen/http/people/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `people (list|create|show|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` people list --q-start 4104335139923356048 --q-end 1434903347250522545 --q-order "DESC" --q-sort "Et dolores laborum dolorem." --query "Amet consequatur."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		peopleFlags = flag.NewFlagSet("people", flag.ContinueOnError)

		peopleListFlags      = flag.NewFlagSet("list", flag.ExitOnError)
		peopleListQStartFlag = peopleListFlags.String("q-start", "", "")
		peopleListQEndFlag   = peopleListFlags.String("q-end", "", "")
		peopleListQOrderFlag = peopleListFlags.String("q-order", "", "")
		peopleListQSortFlag  = peopleListFlags.String("q-sort", "", "")
		peopleListQueryFlag  = peopleListFlags.String("query", "", "")

		peopleCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		peopleCreateBodyFlag = peopleCreateFlags.String("body", "REQUIRED", "")

		peopleShowFlags  = flag.NewFlagSet("show", flag.ExitOnError)
		peopleShowIDFlag = peopleShowFlags.String("id", "REQUIRED", "")

		peopleUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		peopleUpdateBodyFlag = peopleUpdateFlags.String("body", "REQUIRED", "")
		peopleUpdateIDFlag   = peopleUpdateFlags.String("id", "REQUIRED", "")

		peopleDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		peopleDeleteIDFlag = peopleDeleteFlags.String("id", "REQUIRED", "")
	)
	peopleFlags.Usage = peopleUsage
	peopleListFlags.Usage = peopleListUsage
	peopleCreateFlags.Usage = peopleCreateUsage
	peopleShowFlags.Usage = peopleShowUsage
	peopleUpdateFlags.Usage = peopleUpdateUsage
	peopleDeleteFlags.Usage = peopleDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "people":
			svcf = peopleFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "people":
			switch epn {
			case "list":
				epf = peopleListFlags

			case "create":
				epf = peopleCreateFlags

			case "show":
				epf = peopleShowFlags

			case "update":
				epf = peopleUpdateFlags

			case "delete":
				epf = peopleDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "people":
			c := peoplec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = peoplec.BuildListPayload(*peopleListQStartFlag, *peopleListQEndFlag, *peopleListQOrderFlag, *peopleListQSortFlag, *peopleListQueryFlag)
			case "create":
				endpoint = c.Create()
				data, err = peoplec.BuildCreatePayload(*peopleCreateBodyFlag)
			case "show":
				endpoint = c.Show()
				data, err = peoplec.BuildShowPayload(*peopleShowIDFlag)
			case "update":
				endpoint = c.Update()
				data, err = peoplec.BuildUpdatePayload(*peopleUpdateBodyFlag, *peopleUpdateIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = peoplec.BuildDeletePayload(*peopleDeleteIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// peopleUsage displays the usage of the people command and its subcommands.
func peopleUsage() {
	fmt.Fprintf(os.Stderr, `Service is the people service interface.
Usage:
    %s [globalflags] people COMMAND [flags]

COMMAND:
    list: list
    create: create
    show: show
    update: update
    delete: delete

Additional help:
    %s people COMMAND --help
`, os.Args[0], os.Args[0])
}
func peopleListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] people list -q-start INT -q-end INT -q-order STRING -q-sort STRING -query STRING

list
    -q-start INT: 
    -q-end INT: 
    -q-order STRING: 
    -q-sort STRING: 
    -query STRING: 

Example:
    `+os.Args[0]+` people list --q-start 4104335139923356048 --q-end 1434903347250522545 --q-order "DESC" --q-sort "Et dolores laborum dolorem." --query "Amet consequatur."
`, os.Args[0])
}

func peopleCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] people create -body JSON

create
    -body JSON: 

Example:
    `+os.Args[0]+` people create --body '{
      "memo": "Saepe dolorem.",
      "name": "Dolorem sed blanditiis."
   }'
`, os.Args[0])
}

func peopleShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] people show -id INT64

show
    -id INT64: 

Example:
    `+os.Args[0]+` people show --id 6450825462417623824
`, os.Args[0])
}

func peopleUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] people update -body JSON -id INT64

update
    -body JSON: 
    -id INT64: 

Example:
    `+os.Args[0]+` people update --body '{
      "memo": "Quos nihil debitis.",
      "name": "Accusantium officia nam qui eum ex."
   }' --id 4020992328498277894
`, os.Args[0])
}

func peopleDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] people delete -id INT64

delete
    -id INT64: 

Example:
    `+os.Args[0]+` people delete --id 7911807463910524507
`, os.Args[0])
}
